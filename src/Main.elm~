port module Main exposing (..)

import Browser
import Html exposing (Html, Attribute, section, h1, div, label, input, textarea
                     , select, option, button, text)
import Html.Attributes exposing (id, class, value, multiple, selected, rows, type_)
import Html.Events exposing (on, onInput, onClick)
import Json.Decode as Decode
import Json.Encode as Encode
import List 
import Maybe
import Set
import String
import Tuple 


main =
  Browser.element { init = init
                  , view = view
                  , update = update
                  , subscriptions = \_ -> Sub.none 
                  }

-- ports
port save : String -> Cmd msg

-- MODEL

type alias Jahrgang = 
    { id : String
    , name : String
    , counter : Int
    }
type alias Fach = 
    { id : String
    , name : String
    , counter : Int
    }
type alias Fachbereich =
    { id : String
    , name : String
    , counter : Int
    , fachId : String
    }
type alias Thema =
    { id : String
    , fachId : String
    , fachbereichId : String
    , name : String
    , counter : Int
    }
type alias Themenbereich =
    { id : String
    , fachId : String
    , fachbereichId : String
    , themaId : String
    , name : String
    , counter : Int
    }
type alias Dysfunktionen =
    { id : String
    , fachId : String
    , fachbereichId : String
    , themaId : String
    , themenbereichId : String
    , name : String
    , counter : Int
    }
type alias Pathologie =
    { id : String
    , fachId : String
    , fachbereichId : String
    , themaId : String
    , themenbereichId : String
    , name : String
    , counter : Int
    }
type alias Dozent = 
    { id : String
    , name : String
    , counter : Int
    }

type alias Model =
    { jahrgaenge : List Jahrgang
    , curJahrgang : String
    , faecher : List Fach
    , curFaecher : List String
    , fachbereiche : List Fachbereich
    , curFachbereiche : List String
    , stunden : List String
    , curStunden : String
    , themen : List Thema
    , curThemen : List String
    , themenbereiche : List Themenbereich
    , curThemenbereiche : List String
    , dysfunktionen : List Dysfunktionen
    , curDysfunktionen : List String
    , pathologien : List Pathologie
    , curPathologien : List String
    , dozenten : List Dozent
    , curDozent : String
    , curDatum : String
    , curAssistent : String
    , curBemerkungen : String
    }


decoder field =
    let constructor = case field of
                        "Jahrgang"  -> Jahrgang
                        "Dozent"    -> Dozent
                        "Fach"      -> Fach
                        _           -> Jahrgang
    in Decode.at [field, "records"]
        (Decode.list
            (Decode.map3 constructor
                (Decode.field "id" Decode.string)
                (Decode.at ["fields", field] Decode.string)
                (Decode.at ["fields", "Counter"] Decode.int)))

decodeAirtableFachbereiche =
    Decode.at ["Fachbereich", "records"] 
        (Decode.list 
            (Decode.map4 Fachbereich 
                (Decode.field "id" Decode.string) 
                (Decode.at ["fields", "Fachbereich"] Decode.string)
                (Decode.at ["fields", "Counter"] Decode.int)
                (Decode.at ["fields", "Fach"] (Decode.index 0 Decode.string))
        ))
decodeAirtableThemen =
    Decode.at ["Thema", "records"] 
        (Decode.list 
            (Decode.map5 Thema 
                (Decode.field "id" Decode.string) 
                (Decode.at ["fields", "Fach"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Fachbereich"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Thema"] Decode.string)
                (Decode.at ["fields", "Counter"] Decode.int)))
decodeAirtableThemenbereiche =
    Decode.at ["Themenbereich", "records"] 
        (Decode.list 
            (Decode.map6 Themenbereich 
                (Decode.field "id" Decode.string) 
                (Decode.at ["fields", "Fach"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Fachbereich"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Thema"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Themenbereich"] Decode.string)
                (Decode.at ["fields", "Counter"] Decode.int)))
decodeAirtableDysfunktionen =
    Decode.at ["Dysfunktionen", "records"] 
        (Decode.list 
            (Decode.map7 Dysfunktionen
                (Decode.field "id" Decode.string) 
                (Decode.at ["fields", "Fach"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Fachbereich"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Thema"] (Decode.index 0 Decode.string))
                (Decode.map (Maybe.withDefault "") <| 
                    Decode.maybe (Decode.at ["fields", "Themenbereich"] (Decode.index 0 Decode.string)))
                (Decode.at ["fields", "Dysfunktionen"] Decode.string)
                (Decode.at ["fields", "Counter"] Decode.int)))
decodeAirtablePathologien =
    Decode.at ["Pathologie", "records"] 
        (Decode.list 
            (Decode.map7 Pathologie
                (Decode.field "id" Decode.string) 
                (Decode.at ["fields", "Fach"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Fachbereich"] (Decode.index 0 Decode.string))
                (Decode.at ["fields", "Thema"] (Decode.index 0 Decode.string))
                (Decode.map (Maybe.withDefault "") <| 
                    Decode.maybe (Decode.at ["fields", "Themenbereich"] (Decode.index 0 Decode.string)))
                (Decode.at ["fields", "Pathologie"] Decode.string)
                (Decode.at ["fields", "Counter"] Decode.int)))
    

init : Decode.Value -> (Model, Cmd Message)
init v =
    let sort = List.sortBy .counter
        faecher = case (Decode.decodeValue (decoder "Fach") v) of
                    Err e -> [] --Debug.log (Decode.errorToString e) []
                    Ok ds -> sort ds
        fachbereiche = case (Decode.decodeValue decodeAirtableFachbereiche v) of
                    Err e -> []
                    Ok ds -> sort ds
        themen = case (Decode.decodeValue decodeAirtableThemen v) of
                    Err e -> []
                    Ok ds -> sort ds
        themenbereiche = case (Decode.decodeValue decodeAirtableThemenbereiche v) of
                    Err e -> []
                    Ok ds -> sort ds
        dysfunktionen = case (Decode.decodeValue decodeAirtableDysfunktionen v) of
                    Err e -> []
                    Ok ds -> sort ds
        pathologien = case (Decode.decodeValue decodeAirtablePathologien v) of
                    Err e -> []
                    Ok ds -> sort ds
        jahrgaenge = case (Decode.decodeValue (decoder "Jahrgang") v) of
                    Err e -> []
                    Ok ds -> sort ds
        dozenten = case (Decode.decodeValue (decoder "Dozent") v) of
                    Err e -> []
                    Ok ds -> sort ds
    in
    ({ jahrgaenge = jahrgaenge
     , curJahrgang = ""
     , faecher = faecher
     , curFaecher = []
     , fachbereiche = fachbereiche
     , curFachbereiche = []
     , stunden = [ "1", "2", "3", "4", "5", "6", "7", "8" ]
     , curStunden = ""
     , themen = themen
     , curThemen = []
     , themenbereiche = themenbereiche
     , curThemenbereiche = []
     , dysfunktionen = dysfunktionen
     , curDysfunktionen = []
     , pathologien = pathologien
     , curPathologien = []
     , dozenten = dozenten 
     , curDozent = ""
     , curDatum = ""
     , curAssistent = ""
     , curBemerkungen = ""
     }, Cmd.none)

-- UPDATE

type Message = SelectFaecher (List String)
             | SelectFachbereiche (List String)
             | SelectThemen (List String)
             | SelectThemenbereiche (List String)
             | SelectDysfunktionen (List String)
             | SelectPathologien (List String)
             | SelectJahrgang String
             | SelectDozent String
             | SelectStunden String
             | InputAssistent String
             | InputBemerkungen String
             | InputDatum String
             | Save
             | Reset

--dbgchange message model =
--    (Debug.log (Debug.toString message) (update message model), Cmd.none)

-- helper functions
in_ : List String -> (a -> String) -> a -> Bool
in_ values flt = \x -> List.member (flt x) values

in_or_empty : List String -> (a -> String) -> a -> Bool
in_or_empty values flt = 
    case values of
        [] -> always True
        _  -> in_ values flt

maybeIn : List String -> (a -> String) -> a -> Maybe String
maybeIn values flt x = 
    case (in_ values flt x) of
        True  -> Just (flt x)
        False -> Nothing

intersect : List String -> List String -> List String
intersect ys = List.filter (\x -> List.member x ys)

withDefault : List String -> List String -> List String
withDefault default list = if (List.isEmpty list) then default else list

-- zum Speichern in airtable-Format bringen 
airtableName m = 
    let dozent   = List.map .name << List.filter (\x -> x.id == m.curDozent) <| m.dozenten
        jahrgang = List.map .name << List.filter (\x -> x.id == m.curJahrgang) <| m.jahrgaenge
        faecher  = List.map .name << List.filter (.id |> in_ m.curFaecher) <| m.faecher
    in  String.join "_" <| dozent ++ jahrgang ++ faecher ++ [m.curDatum]
                

encodeModel : Model -> Encode.Value
encodeModel m = Encode.object 
                    [ ("Name", Encode.string <| airtableName m)
                    , ("Jahrgang", Encode.list Encode.string [m.curJahrgang])
                    , ("Fach", Encode.set Encode.string <| Set.fromList m.curFaecher)
                    , ("Fachbereich", Encode.set Encode.string <| Set.fromList m.curFachbereiche)
                    , ("Thema", Encode.set Encode.string <| Set.fromList m.curThemen)
                    , ("Themenbereich", Encode.set Encode.string <| Set.fromList m.curThemenbereiche)
                    , ("Dysfunktionen", Encode.set Encode.string <| Set.fromList m.curDysfunktionen)
                    , ("Pathologie", Encode.set Encode.string <| Set.fromList m.curPathologien)
                    , ("Stunden", Encode.int <| Maybe.withDefault 0 <| String.toInt m.curStunden)
                    , ("Dozent", Encode.list Encode.string (if (m.curDozent == "") then [] else [m.curDozent]))
                    , ("Datum", Encode.string m.curDatum)
                    , ("Assistent", Encode.string m.curAssistent)
                    , ("Notes", Encode.string m.curBemerkungen)
                    ]


upward message model =
    case message of
        SelectFaecher ids        -> { model | curFaecher = ids }

        SelectFachbereiche ids   -> let selected = List.map .fachId << List.filter (.id |> in_ ids) <| model.fachbereiche
                                        fIds     = withDefault model.curFaecher selected
                                    in upward (SelectFaecher fIds) { model | curFachbereiche = ids }

        SelectThemen ids         -> let selected = List.map .fachbereichId << List.filter (.id |> in_ ids) <| model.themen
                                        fbIds    = withDefault model.curFachbereiche selected
                                    in upward (SelectFachbereiche fbIds) { model | curThemen = ids }

        SelectThemenbereiche ids -> let selected = List.map .themaId << List.filter (.id |> in_ ids) <| model.themenbereiche
                                        tIds     = withDefault model.curThemen selected
                                    in upward (SelectThemen tIds) { model | curThemenbereiche = ids }

        SelectDysfunktionen ids  -> let selected = List.filter (.id |> in_ ids) model.dysfunktionen
                                        tbIds    = withDefault model.curThemenbereiche <| List.map .themenbereichId selected
                                        -- es gibt Dysfunktionen, die keinem Themenbereich untergeordnet sind, dann Themen prüfen
                                        tIds     = withDefault model.curThemen <| List.map .themaId selected
                                    in 
                                    if (List.isEmpty (List.filter ((/=)"") tbIds))
                                    then upward (SelectThemen tIds) { model | curThemenbereiche = [], curDysfunktionen = ids }
                                    else upward (SelectThemenbereiche tbIds) { model | curDysfunktionen = ids }

        SelectPathologien ids    -> let selected = List.filter (.id |> in_ ids) model.pathologien
                                        tbIds    = withDefault model.curThemenbereiche <| List.map .themenbereichId selected
                                        -- es gibt Pathologien, die keinem Themenbereich untergeordnet sind, dann Themen prüfen
                                        tIds     = withDefault model.curThemen <| List.map .themaId selected
                                    in
                                    if (List.isEmpty (List.filter ((/=)"") tbIds))
                                    then upward (SelectThemen tIds) { model | curThemenbereiche = [], curPathologien = ids }
                                    else upward (SelectThemenbereiche tbIds) { model | curPathologien = ids }

        _                        -> model

downward message model =
    case message of
        SelectFaecher ids        -> let fbIds = intersect model.curFachbereiche 
                                             <| List.filterMap (.fachId |> maybeIn ids) model.fachbereiche
                                    in downward (SelectFachbereiche fbIds) { model | curFaecher = ids }

        SelectFachbereiche ids   -> let thIds = intersect model.curThemen 
                                             <| List.filterMap (.fachbereichId |> maybeIn ids) model.themen
                                    in downward (SelectThemen thIds) { model | curFachbereiche = ids }

        SelectThemen ids         -> let tbIds = intersect model.curThemenbereiche 
                                             <| List.filterMap (.themaId |> maybeIn ids) model.themenbereiche
                                    in downward (SelectThemenbereiche tbIds) { model | curThemen = ids }

        SelectThemenbereiche ids -> let dIds  = intersect model.curDysfunktionen 
                                             <| List.filterMap (.themenbereichId |> maybeIn ids) model.dysfunktionen
                                        pIds  = intersect model.curPathologien 
                                             <| List.filterMap (.themenbereichId |> maybeIn ids) model.pathologien
                                    in (downward (SelectDysfunktionen dIds) >> downward (SelectPathologien pIds))
                                         { model | curThemenbereiche = ids }

        SelectDysfunktionen ids  -> { model | curDysfunktionen = ids }
        SelectPathologien ids    -> { model | curPathologien = ids }
        _                        -> model

update message model =
    let flt = List.filter ((/=)"") in
    case message of
        SelectFaecher ids        -> (downward (SelectFaecher (flt ids)) model, Cmd.none)
        SelectFachbereiche ids   -> (upward (SelectFachbereiche (flt ids)) model |> downward (SelectFachbereiche (flt ids)), Cmd.none)
        SelectThemen ids         -> (upward (SelectThemen (flt ids)) model |> downward (SelectThemen (flt ids)), Cmd.none)
        SelectThemenbereiche ids -> (upward (SelectThemenbereiche (flt ids)) model |> downward (SelectThemenbereiche (flt ids)), Cmd.none)
        SelectDysfunktionen ids  -> (upward (SelectDysfunktionen (flt ids)) model, Cmd.none)
        SelectPathologien ids    -> (upward (SelectPathologien (flt ids)) model, Cmd.none)
        SelectJahrgang id        -> ({ model | curJahrgang = id }, Cmd.none)
        SelectDozent id          -> ({ model | curDozent = id }, Cmd.none)
        SelectStunden id         -> ({ model | curStunden = id }, Cmd.none)
        InputAssistent data      -> ({ model | curAssistent = data }, Cmd.none)
        InputBemerkungen data    -> ({ model | curBemerkungen = data }, Cmd.none)
        InputDatum       data    -> ({ model | curDatum = data }, Cmd.none)
        Reset                    -> ({ model | curJahrgang = ""
                                             , curFaecher = []
                                             , curFachbereiche = []
                                             , curStunden = ""
                                             , curThemen = []
                                             , curThemenbereiche = []
                                             , curDysfunktionen = []
                                             , curPathologien = []
                                             , curDozent = ""
                                             , curDatum = ""
                                             , curAssistent = ""
                                             , curBemerkungen = ""
                                     }, Cmd.none)
        Save                     -> (model, save <| Encode.encode 0 <| encodeModel model)

onMultiChange : (List String -> Message) -> Attribute Message
onMultiChange createMessage =
    on "change" (Decode.map (createMessage << (List.map Tuple.second))
        (Decode.at ["target", "selectedOptions"] 
            (Decode.keyValuePairs (Decode.field "value" Decode.string))))


-- VIEW


select_ lbl attributes options = 
    div [class "field"] 
        [ label [class "label"] 
                [text lbl]
        , div [class "control"] 
              [div [class (if (List.member (multiple True) attributes) then "select is-multiple" else "select")]
                   [select attributes <| (option [value ""] [text "-"])::options]]
        ]

view : Model -> Html Message
view model =
  section [class "section"]
    [div [class "container"]
        [section [class "hero"]
            [div [class "hero-body"]
                [div [class "container"]
                    [h1 [class "title"] [text "Unterrichtseingabeformular"]]
                ]
            ]
        , div []
            [ select_ "Jahrgang" [onInput SelectJahrgang] 
                (List.map (\e -> option [selected (e.id == model.curJahrgang), value e.id] [text e.name]) 
                    model.jahrgaenge)
            , select_ "Fach" [onMultiChange SelectFaecher] 
                (List.map (\e -> option [selected (List.member e.id model.curFaecher), value e.id] [text e.name]) 
                    model.faecher)
            , select_ "Fachbereich" [onMultiChange SelectFachbereiche] 
                (List.map (\e -> option [selected (List.member e.id model.curFachbereiche), value e.id] [text e.name]) 
                    (List.filter (.fachId |> in_or_empty model.curFaecher)
                        model.fachbereiche))
            , select_ "Anzahl Stunden" [onInput SelectStunden] 
                (List.map (\e -> option [selected (e == model.curStunden), value e] [text e]) 
                    model.stunden)
            , select_ "Thema" [onMultiChange SelectThemen] 
                (List.map (\e -> option [selected (List.member e.id model.curThemen), value e.id] [text e.name]) 
                    (List.filter (.fachId |> in_or_empty model.curFaecher)
                        (List.filter (.fachbereichId |> in_or_empty model.curFachbereiche) 
                            model.themen)))
            , select_ "Themenbereich" [onMultiChange SelectThemenbereiche] 
                (List.map (\e -> option [selected (List.member e.id model.curThemenbereiche), value e.id] [text e.name]) 
                    (List.filter (.fachId |> in_or_empty model.curFaecher)
                        (List.filter (.fachbereichId |> in_or_empty model.curFachbereiche) 
                            (List.filter (.themaId |> in_or_empty model.curThemen) 
                                model.themenbereiche))))
            , select_ "Dysfunktionen" [multiple True, onMultiChange SelectDysfunktionen] 
                (List.map (\e -> option [selected (List.member e.id model.curDysfunktionen), value e.id] [text e.name]) 
                    (List.filter (.fachId |> in_or_empty model.curFaecher)
                        (List.filter (.fachbereichId |> in_or_empty model.curFachbereiche) 
                            (List.filter (.themaId |> in_or_empty model.curThemen) 
                                (List.filter (.themenbereichId |> in_or_empty model.curThemenbereiche) 
                                    model.dysfunktionen)))))
            , select_ "Pathologie" [multiple True, onMultiChange SelectPathologien] 
                (List.map (\e -> option [selected (List.member e.id model.curPathologien), value e.id] [text e.name]) 
                    (List.filter (.fachId |> in_or_empty model.curFaecher)
                        (List.filter (.fachbereichId |> in_or_empty model.curFachbereiche) 
                            (List.filter (.themaId |> in_or_empty model.curThemen) 
                                (List.filter (.themenbereichId |> in_or_empty model.curThemenbereiche) 
                                    model.pathologien)))))
            , div [class "field"] [
                label [class "label"] [text "Datum"], 
                div [class "control"] 
                    [input [class "input", type_ "date", onInput InputDatum, value model.curDatum] []]
              ]
            , select_ "Dozent" [onInput SelectDozent] 
                (List.map (\e -> option [selected (e.id == model.curDozent), value e.id] [text e.name]) 
                    model.dozenten)
            , div [class "field"] [
                label [class "label"] [text "Assistent"], 
                div [class "control"] 
                    [input [class "input", type_ "text", onInput InputAssistent] [text model.curAssistent]]
              ]
            , div [class "field"] [
                label [class "label"] [text "Bemerkungen"], 
                div [class "control"] 
                    [textarea [class "textarea", rows 3, onInput InputBemerkungen] [text model.curBemerkungen]]
              ]
            , div [class "field is-grouped"] [
                div [class "control"] [button [class "button is-primary", onClick Save] [text "Speichern"]],
                div [class "control"] [button [class "button is-text", onClick Reset] [text "Zurücksetzen"]]
              ]
            ]
        ]
    ]
